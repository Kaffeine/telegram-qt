import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -noinstantiate -nonrelocatable -v TelegramQt 0.2'

Module {
    dependencies: ["QtQuick 2.6"]
    Component {
        name: "AccountSecretHelper"
        prototype: "QObject"
        exports: ["TelegramQt/AccountSecretHelper 0.2"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Format"
            values: {
                "FormatBinary": 0,
                "FormatHex": 1
            }
        }
        Property { name: "accountDataExists"; type: "bool"; isReadonly: true }
        Property { name: "directory"; type: "string" }
        Property { name: "account"; type: "string" }
        Property { name: "accounts"; type: "QStringList"; isReadonly: true }
        Property { name: "format"; type: "Format" }
        Signal {
            name: "credentialDataExistsChanged"
            Parameter { name: "exist"; type: "bool" }
        }
        Signal {
            name: "directoryChanged"
            Parameter { name: "newDirectory"; type: "string" }
        }
        Signal {
            name: "accountChanged"
            Parameter { name: "account"; type: "string" }
        }
        Signal {
            name: "accountsChanged"
            Parameter { name: "accounts"; type: "QStringList" }
        }
        Signal {
            name: "formatChanged"
            Parameter { name: "newFormat"; type: "Format" }
        }
        Method {
            name: "setDirectory"
            Parameter { name: "newDirectory"; type: "string" }
        }
        Method {
            name: "setAccount"
            Parameter { name: "newAccount"; type: "string" }
        }
        Method {
            name: "setFormat"
            Parameter { name: "newFormat"; type: "Format" }
        }
        Method {
            name: "saveCredentialsData"
            type: "bool"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method { name: "removeCredentialsData"; type: "bool" }
    }
    Component {
        name: "Telegram::Client::AccountApi"
        prototype: "Telegram::Client::ClientApi"
        exports: ["TelegramQt/AccountApi 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Telegram::Client::AccountStorage"
        prototype: "QObject"
        exports: ["TelegramQt/AccountStorage 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "accountIdentifier"; type: "string" }
        Signal { name: "synced" }
        Signal {
            name: "accountIdentifierChanged"
            Parameter { name: "accountIdentifier"; type: "string" }
        }
        Signal {
            name: "accountInvalidated"
            Parameter { name: "accountIdentifier"; type: "string" }
        }
        Method { name: "saveData"; type: "bool" }
        Method { name: "loadData"; type: "bool" }
        Method { name: "sync"; type: "bool" }
    }
    Component {
        name: "Telegram::Client::AppInformation"
        prototype: "QObject"
        exports: ["TelegramQt/AppInformation 0.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "appId"; type: "uint" }
        Property { name: "appHash"; type: "string" }
        Property { name: "appVersion"; type: "string" }
        Property { name: "deviceInfo"; type: "string" }
        Property { name: "osInfo"; type: "string" }
        Property { name: "languageCode"; type: "string" }
    }
    Component { name: "Telegram::Client::ClientApi"; prototype: "QObject" }
    Component {
        name: "Telegram::Client::ConnectionApi"
        prototype: "Telegram::Client::ClientApi"
        exports: ["TelegramQt/ConnectionApi 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "StatusDisconnected": 0,
                "StatusDisconnecting": 1,
                "StatusWaitForConnection": 2,
                "StatusConnecting": 3,
                "StatusWaitForAuthentication": 4,
                "StatusConnected": 5,
                "StatusReady": 6
            }
        }
        Enum {
            name: "StatusReason"
            values: {
                "StatusReasonNone": 0,
                "StatusReasonLocal": 1,
                "StatusReasonError": 2
            }
        }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Signal {
            name: "statusChanged"
            Parameter { name: "status"; type: "Telegram::Client::ConnectionApi::Status" }
            Parameter { name: "reason"; type: "Telegram::Client::ConnectionApi::StatusReason" }
        }
        Method { name: "disconnectFromServer" }
        Method { name: "connectRightNow"; type: "bool" }
        Method { name: "remainingTimeToConnect"; type: "int" }
    }
    Component {
        name: "Telegram::Client::DataStorage"
        prototype: "QObject"
        exports: ["TelegramQt/DataStorage 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Telegram::Client::DeclarativeAuthOperation"
        prototype: "Telegram::Client::DeclarativeOperation"
        exports: ["TelegramQt/AuthOperation 0.2"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AuthStatus"
            values: {
                "Idle": 0,
                "Connecting": 1,
                "Handshake": 2,
                "PhoneNumberRequired": 3,
                "AuthCodeRequired": 4,
                "PasswordRequired": 5,
                "SignedIn": 6
            }
        }
        Property { name: "phoneNumber"; type: "string" }
        Property { name: "registered"; type: "bool"; isReadonly: true }
        Property { name: "passwordHint"; type: "string"; isReadonly: true }
        Property { name: "hasRecovery"; type: "bool"; isReadonly: true }
        Property { name: "status"; type: "AuthStatus"; isReadonly: true }
        Property { name: "busy"; type: "bool"; isReadonly: true }
        Signal {
            name: "busyChanged"
            Parameter { name: "busy"; type: "bool" }
        }
        Signal {
            name: "checkInFinished"
            Parameter { name: "signedIn"; type: "bool" }
        }
        Signal {
            name: "signInFinished"
            Parameter { name: "signedIn"; type: "bool" }
        }
        Signal {
            name: "passwordHintChanged"
            Parameter { name: "hint"; type: "string" }
        }
        Signal { name: "phoneNumberRequired" }
        Signal { name: "authCodeRequired" }
        Signal { name: "authCodeCheckFailed" }
        Signal { name: "passwordRequired" }
        Signal { name: "passwordCheckFailed" }
        Signal {
            name: "registeredChanged"
            Parameter { name: "registered"; type: "bool" }
        }
        Signal {
            name: "statusChanged"
            Parameter { name: "status"; type: "AuthStatus" }
        }
        Signal {
            name: "errorOccurred"
            Parameter { name: "errorCode"; type: "Telegram::Namespace::AuthenticationError" }
            Parameter { name: "errorMessage"; type: "QByteArray" }
        }
        Signal {
            name: "authorizationErrorReceived"
            Parameter { name: "errorCode"; type: "Telegram::Namespace::UnauthorizedError" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Method { name: "startAuthentication" }
        Method { name: "checkIn" }
        Method { name: "abort" }
        Method {
            name: "submitPhoneNumber"
            Parameter { name: "phoneNumber"; type: "string" }
        }
        Method {
            name: "submitAuthCode"
            type: "bool"
            Parameter { name: "code"; type: "string" }
        }
        Method {
            name: "submitPassword"
            type: "bool"
            Parameter { name: "password"; type: "string" }
        }
        Method {
            name: "submitName"
            type: "bool"
            Parameter { name: "firstName"; type: "string" }
            Parameter { name: "lastName"; type: "string" }
        }
        Method {
            name: "setPhoneNumber"
            Parameter { name: "phoneNumber"; type: "string" }
        }
        Method { name: "recovery"; type: "bool" }
        Method { name: "requestCall"; type: "bool" }
        Method { name: "requestSms"; type: "bool" }
    }
    Component {
        name: "Telegram::Client::DeclarativeClient"
        prototype: "QObject"
        exports: ["TelegramQt/Client 0.2"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "applicationInformation"
            type: "Telegram::Client::AppInformation"
            isPointer: true
        }
        Property { name: "signedIn"; type: "bool"; isReadonly: true }
        Property { name: "settings"; type: "Telegram::Client::DeclarativeSettings"; isPointer: true }
        Property { name: "accountStorage"; type: "Telegram::Client::AccountStorage"; isPointer: true }
        Property { name: "dataStorage"; type: "Telegram::Client::DataStorage"; isPointer: true }
        Property {
            name: "accountApi"
            type: "Telegram::Client::AccountApi"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "connectionApi"
            type: "Telegram::Client::ConnectionApi"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "messagingApi"
            type: "Telegram::Client::MessagingApi"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "signedInChanged"
            Parameter { name: "signedIn"; type: "bool" }
        }
        Method {
            name: "setAppInformation"
            Parameter { name: "newAppInfo"; type: "AppInformation"; isPointer: true }
        }
        Method {
            name: "setSettings"
            Parameter { name: "settings"; type: "DeclarativeSettings"; isPointer: true }
        }
        Method {
            name: "setAccountStorage"
            Parameter { name: "storage"; type: "AccountStorage"; isPointer: true }
        }
        Method {
            name: "setDataStorage"
            Parameter { name: "storage"; type: "DataStorage"; isPointer: true }
        }
        Method { name: "syncSettings"; type: "bool" }
    }
    Component {
        name: "Telegram::Client::DeclarativeClientOperator"
        prototype: "QObject"
        Property { name: "client"; type: "Telegram::Client::DeclarativeClient"; isPointer: true }
        Method {
            name: "setQmlClient"
            Parameter { name: "client"; type: "DeclarativeClient"; isPointer: true }
        }
    }
    Component {
        name: "Telegram::Client::DeclarativeMessageSender"
        prototype: "Telegram::Client::DeclarativeClientOperator"
        exports: ["TelegramQt/MessageSender 0.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "peer"; type: "Telegram::Peer" }
        Property { name: "text"; type: "string" }
        Signal {
            name: "peerChanged"
            Parameter { name: "peer"; type: "Telegram::Peer" }
        }
        Signal {
            name: "textChanged"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "setPeer"
            Parameter { name: "peer"; type: "Telegram::Peer" }
        }
        Method {
            name: "setText"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "sendMessage" }
        Method { name: "clearDraft" }
    }
    Component {
        name: "Telegram::Client::DeclarativeOperation"
        prototype: "Telegram::Client::DeclarativeClientOperator"
        Property { name: "succeeded"; type: "bool"; isReadonly: true }
        Signal { name: "started" }
        Signal {
            name: "finished"
            Parameter { name: "succeeded"; type: "bool" }
        }
        Signal {
            name: "failed"
            Parameter { name: "details"; type: "QVariantHash" }
        }
        Method { name: "start" }
    }
    Component {
        name: "Telegram::Client::DeclarativePeerInfo"
        prototype: "Telegram::Client::DeclarativeClientOperator"
        exports: ["TelegramQt/PeerInfo 0.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "peer"; type: "Telegram::Peer" }
        Property { name: "userId"; type: "uint" }
        Property { name: "chatType"; type: "Namespace::ChatType"; isReadonly: true }
        Property { name: "displayName"; type: "string"; isReadonly: true }
        Property { name: "pictureFileId"; type: "string"; isReadonly: true }
        Signal {
            name: "displayNameChanged"
            Parameter { name: "displayName"; type: "string" }
        }
        Method {
            name: "setPeer"
            Parameter { name: "peer"; type: "Telegram::Peer" }
        }
        Method {
            name: "setUserId"
            Parameter { name: "userId"; type: "uint" }
        }
    }
    Component {
        name: "Telegram::Client::DeclarativeProxySettings"
        prototype: "QObject"
        exports: ["TelegramQt/ProxySettings 0.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "port"; type: "int" }
        Property { name: "address"; type: "string" }
        Property { name: "user"; type: "string" }
        Property { name: "password"; type: "string" }
        Signal {
            name: "portChanged"
            Parameter { name: "newPort"; type: "ushort" }
        }
        Signal {
            name: "addressChanged"
            Parameter { name: "addressChanged"; type: "string" }
        }
        Signal {
            name: "userChanged"
            Parameter { name: "userChanged"; type: "string" }
        }
        Signal {
            name: "passwordChanged"
            Parameter { name: "passwordChanged"; type: "string" }
        }
        Method {
            name: "setPort"
            Parameter { name: "port"; type: "ushort" }
        }
        Method {
            name: "setAddress"
            Parameter { name: "address"; type: "string" }
        }
        Method {
            name: "setUser"
            Parameter { name: "user"; type: "string" }
        }
        Method {
            name: "setPassword"
            Parameter { name: "password"; type: "string" }
        }
    }
    Component {
        name: "Telegram::Client::DeclarativeRsaKey"
        prototype: "QObject"
        exports: ["TelegramQt/RsaKey 0.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "fileName"; type: "string" }
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Property { name: "fingerprint"; type: "string"; isReadonly: true }
        Signal {
            name: "fileNameChanged"
            Parameter { name: "fileName"; type: "string" }
        }
        Signal {
            name: "validChanged"
            Parameter { name: "valid"; type: "bool" }
        }
        Method {
            name: "setFileName"
            Parameter { name: "fileName"; type: "string" }
        }
    }
    Component {
        name: "Telegram::Client::DeclarativeServerOption"
        prototype: "QObject"
        exports: ["TelegramQt/ServerOption 0.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "address"; type: "string" }
        Property { name: "port"; type: "uint" }
    }
    Component {
        name: "Telegram::Client::DeclarativeSettings"
        prototype: "Telegram::Client::Settings"
        exports: ["TelegramQt/Settings 0.2"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "serverOptions"
            type: "Telegram::Client::DeclarativeServerOption"
            isList: true
            isReadonly: true
        }
        Property { name: "serverKey"; type: "Telegram::Client::DeclarativeRsaKey"; isPointer: true }
        Property {
            name: "proxy"
            type: "Telegram::Client::DeclarativeProxySettings"
            isReadonly: true
            isPointer: true
        }
        Method {
            name: "setServerKey"
            Parameter { name: "serverKey"; type: "DeclarativeRsaKey"; isPointer: true }
        }
    }
    Component {
        name: "Telegram::Client::FileAccountStorage"
        prototype: "Telegram::Client::AccountStorage"
        exports: ["TelegramQt/FileAccountStorage 0.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "fileName"; type: "string" }
        Signal {
            name: "fileNameChanged"
            Parameter { name: "fileName"; type: "string" }
        }
        Signal {
            name: "fileExistsChanged"
            Parameter { name: "exists"; type: "bool" }
        }
        Method { name: "saveData"; type: "bool" }
        Method { name: "loadData"; type: "bool" }
        Method { name: "clearData"; type: "bool" }
        Method { name: "sync"; type: "bool" }
        Method {
            name: "setFileName"
            Parameter { name: "fileName"; type: "string" }
        }
        Method { name: "fileExists"; type: "bool" }
    }
    Component {
        name: "Telegram::Client::InMemoryDataStorage"
        prototype: "Telegram::Client::DataStorage"
        exports: ["TelegramQt/InMemoryDataStorage 0.2"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Telegram::Client::MessagingApi"
        prototype: "Telegram::Client::ClientApi"
        exports: ["TelegramQt/MessagingApi 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal {
            name: "syncMessages"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messages"; type: "QVector<quint32>" }
        }
        Signal {
            name: "syncMessagesReceived"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messages"; type: "QVector<quint32>" }
        }
        Signal {
            name: "messageReceived"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageId"; type: "uint" }
        }
        Signal {
            name: "messageEnqueued"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageRandomId"; type: "qulonglong" }
            Parameter { name: "message"; type: "string" }
            Parameter { name: "options"; type: "SendOptions" }
        }
        Signal {
            name: "messageSent"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageRandomId"; type: "qulonglong" }
            Parameter { name: "messageId"; type: "uint" }
        }
        Signal {
            name: "messageReadInbox"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageId"; type: "uint" }
        }
        Signal {
            name: "messageReadOutbox"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageId"; type: "uint" }
        }
        Signal {
            name: "messageActionChanged"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "userId"; type: "uint" }
            Parameter { name: "action"; type: "Telegram::MessageAction" }
        }
        Method {
            name: "setDraftMessage"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "sendMessage"
            type: "qulonglong"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "message"; type: "string" }
            Parameter { name: "options"; type: "SendOptions" }
        }
        Method {
            name: "sendMessage"
            type: "qulonglong"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "forwardMessage"
            type: "qulonglong"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "fromPeer"; type: "Telegram::Peer" }
            Parameter { name: "messageId"; type: "uint" }
        }
        Method {
            name: "setMessageAction"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "action"; type: "Telegram::MessageAction" }
        }
        Method {
            name: "readHistory"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageId"; type: "uint" }
        }
    }
    Component {
        name: "Telegram::Client::Settings"
        prototype: "QObject"
        Enum {
            name: "SessionType"
            values: {
                "None": 0,
                "Abridged": 1,
                "Obfuscated": 2
            }
        }
        Property { name: "pingInterval"; type: "int" }
        Signal {
            name: "pingIntervalChanged"
            Parameter { name: "interval"; type: "uint" }
            Parameter { name: "serverDisconnectionAdditionalTime"; type: "uint" }
        }
        Method { name: "defaultPingInterval"; type: "uint" }
        Method { name: "defaultServerConfiguration"; type: "QVector<DcOption>" }
        Method { name: "testServerConfiguration"; type: "QVector<DcOption>" }
    }
    Component {
        name: "Telegram::MessageAction"
        exports: ["TelegramQt/MessageAction 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "Typing": 1,
                "RecordVideo": 2,
                "RecordAudio": 3,
                "UploadVideo": 4,
                "UploadAudio": 5,
                "UploadPhoto": 6,
                "UploadDocument": 7,
                "UploadRoundVideo": 8,
                "GeoLocation": 9,
                "ChooseContact": 10
            }
        }
        Property { name: "type"; type: "Telegram::MessageAction::Type" }
        Property { name: "progress"; type: "uint" }
    }
    Component {
        name: "Telegram::Namespace"
        prototype: "QObject"
        exports: ["TelegramQt/Namespace 0.2"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContactStatus"
            values: {
                "ContactStatusUnknown": 0,
                "ContactStatusOffline": 1,
                "ContactStatusOnline": 2
            }
        }
        Enum {
            name: "MessageFlag"
            values: {
                "MessageFlagNone": 0,
                "MessageFlagOut": 1,
                "MessageFlagForwarded": 2,
                "MessageFlagIsReply": 4
            }
        }
        Enum {
            name: "MessageType"
            values: {
                "MessageTypeUnsupported": 0,
                "MessageTypeText": 1,
                "MessageTypePhoto": 2,
                "MessageTypeAudio": 4,
                "MessageTypeVideo": 8,
                "MessageTypeContact": 16,
                "MessageTypeDocument": 32,
                "MessageTypeGeo": 64,
                "MessageTypeWebPage": 128,
                "MessageTypeSticker": 256,
                "MessageTypeAnimation": 512,
                "MessageTypeAll": 65535
            }
        }
        Enum {
            name: "ChatType"
            values: {
                "ChatTypeInvalid": 0,
                "ChatTypeSelfChat": 1,
                "ChatTypeDialog": 2,
                "ChatTypeGroup": 3,
                "ChatTypeMegaGroup": 4,
                "ChatTypeBroadcast": 5
            }
        }
        Enum {
            name: "AuthenticationError"
            values: {
                "AuthenticationErrorUnknown": 0,
                "AuthenticationErrorAppIdInvalid": 1,
                "AuthenticationErrorPhoneNumberInvalid": 2,
                "AuthenticationErrorPhoneNumberOccupied": 3,
                "AuthenticationErrorPhoneNumberUnoccupied": 4,
                "AuthenticationErrorPhoneCodeInvalid": 5,
                "AuthenticationErrorPhoneCodeExpired": 6,
                "AuthenticationErrorPasswordHashInvalid": 7,
                "AuthenticationErrorFirstNameInvalid": 8,
                "AuthenticationErrorLastNameInvalid": 9
            }
        }
        Enum {
            name: "UnauthorizedError"
            values: {
                "UnauthorizedUnknownError": 0,
                "UnauthorizedErrorKeyUnregistered": 1,
                "UnauthorizedErrorKeyInvalid": 2,
                "UnauthorizedErrorUserDeactivated": 3,
                "UnauthorizedErrorUserSessionRevoked": 4,
                "UnauthorizedErrorUserSessionExpired": 5,
                "UnauthorizedErrorActiveUserRequired": 6,
                "UnauthorizedErrorNeedPermanentKey": 7,
                "UnauthorizedSessionPasswordNeeded": 8
            }
        }
        Enum {
            name: "UserNameStatus"
            values: {
                "UserNameStatusUnknown": 0,
                "UserNameStatusIsInvalid": 1,
                "UserNameStatusIsOccupied": 2,
                "UserNameStatusIsNotModified": 3,
                "UserNameStatusCanBeUsed": 4,
                "UserNameStatusCanNotBeUsed": 5,
                "UserNameStatusResolved": 6,
                "UserNameStatusAccepted": 7
            }
        }
        Property { name: "version"; type: "string"; isReadonly: true }
        Property { name: "buildVersion"; type: "string"; isReadonly: true }
        Method { name: "emptyPeer"; type: "Telegram::Peer" }
        Method {
            name: "peerFromChatId"
            type: "Telegram::Peer"
            Parameter { name: "id"; type: "uint" }
        }
        Method {
            name: "peerFromChannelId"
            type: "Telegram::Peer"
            Parameter { name: "id"; type: "uint" }
        }
        Method {
            name: "peerFromUserId"
            type: "Telegram::Peer"
            Parameter { name: "id"; type: "uint" }
        }
    }
    Component {
        name: "Telegram::Peer"
        exports: ["TelegramQt/Peer 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "User": 0,
                "Chat": 1,
                "Channel": 2
            }
        }
        Property { name: "type"; type: "Telegram::Peer::Type" }
        Property { name: "id"; type: "uint" }
        Method { name: "isValid"; type: "bool" }
    }
}
